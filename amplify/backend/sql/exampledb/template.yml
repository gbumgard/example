AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template

Parameters:

  DBUserName:
    Type: String
    Description: An admin user name, e.g. admin. Stored in a SecretManager secret.

  DBClusterName:
    Type: String
    Description: The root name for the DB cluster. Combined with the 'env' parameter value to form the cluster ID.

  Delimiter:
    Type: String
    Description: The initial SQL statement delimiter.

  ResourceLambdaFunction:
    Type: String
    Description: The name of the lambda function that creates, updates and deletes the custom resource.

  Database:
    Type: String

  NoEcho:
    Type: String

  env:
    Type: String
    Description: The environment name. e.g. dev, test, or prod.
    Default: NONE

  functionrdsSqlScriptResourceArn:
    Type: String

  rdsexampledbArn:
    Type: String

  rdsexampledbSecretArn:
    Type: String

Conditions:
  HasEnvironmentParameter: !Not 
    - !Equals 
      - !Ref env
      - NONE

Resources:
  RdsSqlResource:
    Type: Custom::RdsSqlResource
    Properties:
      Region: !Ref "AWS::Region"
      ServiceToken: !Ref functionrdsSqlScriptResourceArn
      ClusterArn: !Ref rdsexampledbArn
      SecretArn: !Ref rdsexampledbSecretArn
      Database: !Ref Database
      Delimiter: !Ref Delimiter
      NoEcho: !Ref NoEcho
      CreateSqlScript: |

        DROP FUNCTION IF EXISTS bin_to_uuid;
        DROP FUNCTION IF EXISTS uuid_to_bin;

        DELIMITER $$
        CREATE FUNCTION bin_to_uuid(b BINARY(16))
            RETURNS CHAR(36) DETERMINISTIC
            BEGIN
                DECLARE HEX CHAR(32);
                SET HEX = HEX(b);
                RETURN LOWER(CONCAT(LEFT(HEX, 8), '-', MID(HEX, 9,4), '-', MID(HEX, 13,4), '-', MID(HEX, 17,4), '-', RIGHT(HEX, 12)));
            END
        $$
        DELIMITER ;

        CREATE FUNCTION uuid_to_bin(s CHAR(36))
            RETURNS BINARY(16) DETERMINISTIC
            RETURN UNHEX(CONCAT(LEFT(s, 8), MID(s, 10, 4), MID(s, 15, 4), MID(s, 20, 4), RIGHT(s, 12)));

        DROP TABLE IF EXISTS User;
        
        CREATE TABLE IF NOT EXISTS User (
          userId BINARY(16) PRIMARY KEY,
          createdAt DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
          updatedAt DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)
        );
        
        INSERT INTO User (userId) VALUES (UNHEX(REPLACE(UUID(),'-','')));
        INSERT INTO User (userId) VALUES (UNHEX(REPLACE(UUID(),'-','')));
        INSERT INTO User (userId) VALUES (UNHEX(REPLACE(UUID(),'-','')));
        INSERT INTO User (userId) VALUES (UNHEX(REPLACE(UUID(),'-','')));
        INSERT INTO User (userId) VALUES (UNHEX(REPLACE(UUID(),'-','')));

        SELECT HEX(userId) as 'userId',
               REPLACE(createdAt,' ','T') as 'createdAt',
               REPLACE(updatedAt,' ','T') as 'updatedAt' FROM User;
         

Outputs:
  RdsSqlResource:
    Value: !Ref RdsSqlResource
  #Results :
  #  Description: "The responses received for each statement in the SQL document."
  #  Value: !GetAtt RdsSqlResource.results
